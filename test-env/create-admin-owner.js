const { MongoClient } = require('mongodb');
const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');

/**
 * 🔧 SCRIPT CREARE ADMIN-OWNER
 * 
 * Acest script creează un utilizator admin cu rol de owner în baza de date MongoDB.
 * Respectă exact structura și formatul din schema User.
 * Folosește configurația din fișierul .env
 */

async function createAdminOwner() {
  // Citește MONGO_URI din fișierul .env
  let MONGO_URI;
  try {
    const envPath = path.resolve(process.cwd(), '.env');
    
    if (!fs.existsSync(envPath)) {
      throw new Error('.env file not found in project root');
    }
    
    const envContent = fs.readFileSync(envPath, 'utf8');
    const mongoUriMatch = envContent.match(/MONGO_URI=(.+)/);
    
    if (mongoUriMatch && mongoUriMatch[1]) {
      MONGO_URI = mongoUriMatch[1].trim();
      console.log('✅ MONGO_URI loaded from .env file');
    } else {
      throw new Error('MONGO_URI not found in .env file');
    }
  } catch (error) {
    console.error('❌ Error reading .env file:', error.message);
    console.log('📋 Make sure you have a .env file in the project root with MONGO_URI configured');
    process.exit(1);
  }
  
  const client = new MongoClient(MONGO_URI);
  
  try {
    console.log('🔗 Conectare la MongoDB...');
    await client.connect();
    console.log('✅ Conexiune MongoDB stabilită');
    
    const db = client.db('tecsa');
    
    // Verifică dacă admin-ul există deja
    const existingAdmin = await db.collection('users').findOne({ 
      $or: [{ username: 'admin' }, { id: 'admin' }, { email: 'admin@tecsa.com' }] 
    });
    
    if (existingAdmin) {
      console.log('⚠️ Admin user already exists!');
      console.log(`   ID: ${existingAdmin.id}`);
      console.log(`   Username: ${existingAdmin.username}`);
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   Role: ${existingAdmin.role}`);
      console.log(`   Active: ${existingAdmin.isActive}`);
      return;
    }
    
    // Creează hash pentru parola "password"
    console.log('🔐 Generare hash pentru parolă...');
    const hashedPassword = await bcrypt.hash('password', 10);
    
    // Creează utilizatorul admin conform schemei User exacte
    const adminOwner = {
      id: "admin",                          // ID unic custom (string)
      username: "admin",                    // Nume utilizator (string, required)
      passwordHash: hashedPassword,         // Hash bcrypt (string, required)
      email: "admin@tecsa.com",            // Email unic (string, required)
      role: "owner",                       // Rol owner (enum Role, default: normal)
      theme: "default",                    // Temă UI (string, default: 'default')
      phone: "+40123456789",               // Telefon (string, optional)
      isActive: true,                      // Status activ (boolean, default: true)
      dateRegistered: new Date(),          // Data înregistrării (Date, default: Date.now)
      createdAt: new Date(),               // Timestamp creare (auto-generated by schema)
      updatedAt: new Date()                // Timestamp actualizare (auto-generated by schema)
    };
    
    console.log('💾 Salvare utilizator în baza de date...');
    await db.collection('users').insertOne(adminOwner);
    
    console.log('✅ Admin-Owner user created successfully!');
    console.log('');
    console.log('📋 ADMIN-OWNER CREDENTIALS:');
    console.log('   ID: admin');
    console.log('   Username: admin');
    console.log('   Password: password');
    console.log('   Email: admin@tecsa.com');
    console.log('   Role: owner');
    console.log('   Theme: default');
    console.log('   Phone: +40123456789');
    console.log('   Active: true');
    console.log('');
    console.log('🔐 IMPORTANT: Schimbă parola după primul login!');
    console.log('👑 OWNER ROLE: Acces complet la toate funcționalitățile sistemului');
    console.log('');
    console.log('🚀 Pentru a testa login-ul:');
    console.log('   POST /auth/login');
    console.log('   Body: {"username": "admin", "password": "password"}');
    
  } catch (error) {
    console.error('❌ Error creating admin-owner:', error.message);
    
    if (error.code === 11000) {
      console.log('⚠️ Duplicate key error - User with this ID, username or email already exists');
    } else if (error.name === 'MongoNetworkError') {
      console.log('🔗 Network error - Check your internet connection and MongoDB URI');
    } else if (error.name === 'MongoServerSelectionError') {
      console.log('🔗 Server selection error - Check MongoDB URI and network connectivity');
    }
    
    console.log('\n🔧 Troubleshooting:');
    console.log('   1. Verify MONGO_URI in .env file is correct');
    console.log('   2. Check internet connection');
    console.log('   3. Verify MongoDB Atlas whitelist settings');
    
  } finally {
    await client.close();
    console.log('🔌 Disconnected from MongoDB');
  }
}

// Verifică dacă scriptul este rulat direct
if (require.main === module) {
  createAdminOwner();
}

module.exports = { createAdminOwner };